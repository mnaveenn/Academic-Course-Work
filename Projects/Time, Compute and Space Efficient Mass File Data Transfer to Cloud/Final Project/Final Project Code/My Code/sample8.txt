This chapter will familiarize you with the framework we shall use throughout the
book to think about the design and analysis of algorithms. It is self-contained, but
it does include several references to material that will be introduced in Chapters
3 and 4. (It also contains several summations, which Appendix A shows how to
solve.)
We begin by examining the insertion sort algorithm to solve the sorting problem
introduced in Chapter 1. We define a pseudocode that should be familiar to readers
who have done computer programming and use it to show how we shall specify
our algorithms. Having specified the algorithm, we then argue that it correctly sorts
and we analyze its running time. The analysis introduces a notation that focuses
on how that time increases with the number of items to be sorted. Following our
discussion of insertion sort, we introduce the divide-and-conquer approach to the
design of algorithms and use it to develop an algorithm called merge sort. We end
with an analysis of merge sorts running time.
The numbers that we wish to sort are also known as the keys.
In this book, we shall typically describe algorithms as programs written in a
pseudocode that is similar in many respects to C, Pascal, or Java. If you have been
introduced to any of these languages, you should have little trouble reading our algorithms.
What separates pseudocode from real code is that in pseudocode, we
employ whatever expressive method is most clear and concise to specify a given algorithm.
Sometimes, the clearest method is English, so do not be surprised if you
come across an English phrase or sentence embedded within a section of real
code. Another difference between pseudocode and real code is that pseudocode
is not typically concerned with issues of software engineering. Issues of data abstraction,
modularity, and error handling are often ignored in order to convey the
essence of the algorithm more concisely.
We start with insertion sort, which is an efficient algorithm for sorting a small
number of elements. Insertion sort works the way many people sort a hand of
playing cards. We start with an empty left hand and the cards face down on the
table. We then remove one card at a time from the table and insert it into the
correct position in the left hand. To find the correct position for a card, we compare
it with each of the cards already in the hand, from right to left, as illustrated in
Figure 2.1. At all times, the cards held in the left hand are sorted, and these cards
were originally the top cards of the pile on the table.
Our pseudocode for insertion sort is presented as a procedure called INSERTIONSORT,
which takes as a parameter an array Acontaining a sequence of
length n that is to be sorted. (In the code, the number n of elements in A is denoted
by length[A].) The input numbers are sorted in place: the numbers are rearranged
within the array A, with at most a constant number of them stored outside the
array at any time. The input array A contains the sorted output sequence when
INSERTION-SORT is finished.
Figure 2.2 The operation of INSERTION-SORT on the array A = 5, 2, 4, 6, 1, 3. Array indices
appear above the rectangles, and values stored in the array positions appear within the rectangles.
(a)(e) The iterations of the for loop of lines 18. In each iteration, the black rectangle holds the
key taken from A[ j ], which is compared with the values in shaded rectangles to its left in the test of
line 5. Shaded arrows show array values moved one position to the right in line 6, and black arrows
indicate where the key ismoved to in line 8. (f) The final sorted array.
Initialization: It is true prior to the first iteration of the loop.
Maintenance: If it is true before an iteration of the loop, it remains true before the
next iteration.
Termination: When the loop terminates, the invariant gives us a useful property
that helps show that the algorithm is correct.
When the first two properties hold, the loop invariant is true prior to every iteration
of the loop. Note the similarity to mathematical induction, where to prove that a
property holds, you prove a base case and an inductive step. Here, showing that
the invariant holds before the first iteration is like the base case, and showing that
the invariant holds from iteration to iteration is like the inductive step.
The third property is perhaps the most important one, since we are using the loop
invariant to show correctness. It also differs from the usual use of mathematical induction,
in which the inductive step is used infinitely; here, we stop the induction
when the loop terminates.
Let us see how these properties hold for insertion sort.