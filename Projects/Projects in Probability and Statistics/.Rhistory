source('C:/Users/USER/Desktop/Probability and Statistics/Assignments/Bayesian Estimators.R')
quantile1 <- list(p=0.5, x=0.85)    # we believe the median of the prior is 0.85
> quantile2 <- list(p=0.99999,x=0.95) # we believe the 99.999th percentile of the prior is 0.95
> quantile3 <- list(p=0.00001,x=0.60)
quantile1 <- list(p=0.5, x=0.85)    # we believe the median of the prior is 0.85
quantile2 <- list(p=0.99999,x=0.95) # we believe the 99.999th percentile of the prior is 0.95
quantile3 <- list(p=0.00001,x=0.60)
findBeta <- function(quantile1,quantile2,quantile3)
{
# find the quantiles specified by quantile1 and quantile2 and quantile3
quantile1_p <- quantile1[[1]]; quantile1_q <- quantile1[[2]]
quantile2_p <- quantile2[[1]]; quantile2_q <- quantile2[[2]]
quantile3_p <- quantile3[[1]]; quantile3_q <- quantile3[[2]]
# find the beta prior using quantile1 and quantile2
priorA <- beta.select(quantile1,quantile2)
priorA_a <- priorA[1]; priorA_b <- priorA[2]
# find the beta prior using quantile1 and quantile3
priorB <- beta.select(quantile1,quantile3)
priorB_a <- priorB[1]; priorB_b <- priorB[2]
# find the best possible beta prior
diff_a <- abs(priorA_a - priorB_a); diff_b <- abs(priorB_b - priorB_b)
step_a <- diff_a / 100; step_b <- diff_b / 100
if (priorA_a < priorB_a) { start_a <- priorA_a; end_a <- priorB_a }
else                     { start_a <- priorB_a; end_a <- priorA_a }
if (priorA_b < priorB_b) { start_b <- priorA_b; end_b <- priorB_b }
else                     { start_b <- priorB_b; end_b <- priorA_b }
steps_a <- seq(from=start_a, to=end_a, length.out=1000)
steps_b <- seq(from=start_b, to=end_b, length.out=1000)
max_error <- 10000000000000000000
best_a <- 0; best_b <- 0
for (a in steps_a)
{
for (b in steps_b)
{
# priorC is beta(a,b)
# find the quantile1_q, quantile2_q, quantile3_q quantiles of priorC:
priorC_q1 <- qbeta(c(quantile1_p), a, b)
priorC_q2 <- qbeta(c(quantile2_p), a, b)
priorC_q3 <- qbeta(c(quantile3_p), a, b)
priorC_error <- abs(priorC_q1-quantile1_q) +
abs(priorC_q2-quantile2_q) +
abs(priorC_q3-quantile3_q)
if (priorC_error < max_error)
{
max_error <- priorC_error; best_a <- a; best_b <- b
}
}
}
print(paste("The best beta prior has a=",best_a,"b=",best_b))
}
findBeta(quantile1,quantile2,quantile3)
da
data=rbeta(100,2,3)
x_bar=sum(data)/n
x_bar=sum(data)/100
Sx=1/n*sum(data^2 - x_bar^2)
Sx=1/100*sum(data^2 - x_bar^2)
Sx
var(data)
Sx=1/99*sum(data^2 - x_bar^2)
Sx
alpha = (((mu^2)-(mu^3)-(variance*mu))/variance)
n=100
alpha=2
beta=3
x=rbeta(n,alpha,beta)
mu=mean(x)
variance=var(x)
alpha = (((mu^2)-(mu^3)-(variance*mu))/variance)
beta = (alpha*(1-mu))/mu
x_bar=sum(x)/n
Sx=1/n*sum(x^2-x_bar^2)
alpha_hat=x_bar*(x_bar*(1-x_bar)/Sx-1)
beta_hat=(1-x_bar)*(x_bar*(1-x_bar)/Sx-1)
alpha_hat=x_bar*(x_bar*(1-x_bar)/variance-1)
beta_hat=(1-x_bar)*(x_bar*(1-x_bar)/variance-1)
source('C:/Users/USER/Desktop/Probability and Statistics/Assignments/Bayesian Estimators.R')
n=100
alpha=2
beta=3
priordist=rbeta(n,alpha,beta)
mu=mean(priordist)
variance=var(priordist)
alpha_hat = (((mu^2)-(mu^3)-(variance*mu))/variance)
beta_hat = (alpha*(1-mu))/mu
w=(alpha_hat/(alpha_hat+beta_hat))
data=rnbinom(n,r,w)
alpha_new=alpha_hat+r*n
n=100
alpha=2
beta=3
r=40
priordist=rbeta(n,alpha,beta)
mu=mean(priordist)
variance=var(priordist)
alpha_hat = (((mu^2)-(mu^3)-(variance*mu))/variance)
beta_hat = (alpha*(1-mu))/mu
w=(alpha_hat/(alpha_hat+beta_hat))
data=rnbinom(n,r,w)
alpha_new=alpha_hat+r*n
beta_new=beta_hat+sum(data)
rbeta(alpha_new,beta_new)
rbeta(n,alpha_new,beta_new)
data
n=100
alpha=2
beta=3
r=40
priordist=rbeta(n,alpha,beta)
mu=mean(priordist)
variance=var(priordist)
alpha_hat = (((mu^2)-(mu^3)-(variance*mu))/variance)
beta_hat = (alpha_hat*(1-mu))/mu
w=(alpha_hat/(alpha_hat+beta_hat))
data=rnbinom(n,r,w)
alpha_new=alpha_hat+r*n
beta_new=beta_hat+sum(data)
rbeta(n,alpha_new,beta_new)
data
n=100
alpha=0.1
beta=0.3
priordist=rgamma(n,alpha,beta)
mu=mean(x)
variance=var(x)
n=100
alpha=0.1
beta=0.3
priordist=rgamma(n,alpha,beta)
mu=mean(priordist)
variance=var(priordist)
x_bar=sum(priordist)/n
Sx=1/n*sum(data^2-x_bar^2)
alpha_hat1=x_bar^2/Sx
beta_hat1=Sx/x_bar
rate=alpha_hat1/beta_hat1
beta_hat=mu/variance
alpha_hat=mu*beta_hat
lambda=alpha_hat*beta_hat
n=100
alpha=0.1
beta=0.3
priordist=rgamma(n,alpha,beta)
mu=mean(priordist)
variance=var(priordist)
x_bar=sum(priordist)/n
Sx=1/n*sum(data^2-x_bar^2)
alpha_hat1=x_bar^2/Sx
beta_hat1=Sx/x_bar
rate=alpha_hat1/beta_hat1
beta_hat=mu/variance
alpha_hat=mu*beta_hat
lambda=alpha_hat*beta_hat
n=100
alpha=0.1
beta=0.3
priordist=rgamma(n,alpha,beta)
mu=mean(priordist)
variance=var(priordist)
x_bar=sum(priordist)/n
Sx=1/n*sum(priordist^2-x_bar^2)
alpha_hat1=x_bar^2/Sx
beta_hat1=Sx/x_bar
rate=alpha_hat1/beta_hat1
beta_hat=mu/variance
alpha_hat=mu*beta_hat
lambda=alpha_hat*beta_hat
Sx=variance(priordist)
alpha_hat1=x_bar^2/Sx
beta_hat1=Sx/x_bar
rate=alpha_hat1/beta_hat1
beta_hat=mu/variance
alpha_hat=mu*beta_hat
lambda=alpha_hat*beta_hat
Sx=var(priordist)
alpha_hat1=x_bar^2/Sx
beta_hat1=Sx/x_bar
rate=alpha_hat1/beta_hat1
beta_hat=mu/variance
alpha_hat=mu*beta_hat
lambda=alpha_hat*beta_hat
alpha_nealpha+n
alpha_new=lpha+n
alpha_new=alpha+n
beta_new=beta+sum(priordist)
rgamma(n,alpha_new,beta_new)
data
data=rexp(n,lambda)
data
rgamma(n,alpha_new,beta_new)
priordist
source('C:/Users/USER/Desktop/Probability and Statistics/Assignments/Bayesian Estimators.R')
source('C:/Users/USER/Desktop/Probability and Statistics/Assignments/Bayesian Estimators.R')
source('C:/Users/USER/Desktop/Probability and Statistics/Assignments/Bayesian Estimators.R')
source('C:/Users/USER/Desktop/Probability and Statistics/Assignments/Bayesian Estimators.R')
source('C:/Users/USER/Desktop/Probability and Statistics/Assignments/Bayesian Estimators.R')
posteriorexponential(100,0.1,0.3)
source('C:/Users/USER/Desktop/Probability and Statistics/Assignments/Bayesian Estimators.R')
posteriorexponential(100,0.1,0.3)
source('C:/Users/USER/Desktop/Probability and Statistics/Assignments/Bayesian Estimators.R')
source('C:/Users/USER/Desktop/Probability and Statistics/Assignments/Bayesian Estimators.R')
posteriorexponential(100,0.1,0.3)
source('C:/Users/USER/Desktop/Probability and Statistics/Assignments/Bayesian Estimators.R')
source('C:/Users/USER/Desktop/Probability and Statistics/Assignments/Bayesian Estimators.R')
source('C:/Users/USER/Desktop/Probability and Statistics/Assignments/Bayesian Estimators.R')
source('C:/Users/USER/Desktop/Probability and Statistics/Assignments/Bayesian Estimators.R')
source('C:/Users/USER/Desktop/Probability and Statistics/Assignments/Bayesian Estimators.R')
source('C:/Users/USER/Desktop/Probability and Statistics/Assignments/Bayesian Estimators.R')
source('C:/Users/USER/Desktop/Probability and Statistics/Assignments/Bayesian Estimators.R')
