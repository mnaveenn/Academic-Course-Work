library(swirl)
swirl()
head(flags)
dim(flags)
viewinfo(flags)
viewinfo()
class(flags)
cls_list<-lapply(flags,class)
cls_list
class(cls_list)
as.character(cls_list)
cls_vect<-sapply(flags,class)
class(cls_vect)
sum(flags$orange)
flag_colors<-flags[,11:17]
head(flag_colors)
lapply(flag_colors,sum)
sapply(flag_colors,sum)
sapply(flag_colors,mean)
flag_shapes<-flags[,19:23]
lapply(flag_shapes,range)
lapply(flags_shapes,range)
0
0
0
0
shape_mat<-sapply(flag_shapes,range)
shape_mat
class(shape_mat)
unique(c(3,4,5,5,5,6,6))
unique_vals<-lapply(flags,unique)
unique_vals
lapply(unique_vals,length)
sapply(unique_vals,length)
sapply(flags,unique)
lapply(unique_vals,function(elem){elem[2]})
sapply(flags, unique)
vapply(flags,unique,numeric(1))
ok()
sapply(flags,class)
vapply(flags,class,character(1))
?tapply
table(flags$landmass)
table(flags$animate)
tapply(flags$animate, flags$landmass, mean)
tapply(flags$population,flags$red,summary)
tapply(flags$population, flags$landmass, summary)
library(datasets)
data("iris")
iris
s<-split(iris,iris$Species)
s.3
s
lapply(s,mean())
lapply(s,mean)
class(s)
lapply(s,mean(Sepal.Length))
lapply(s,mean(s$Sepal.Length))
lapply(s,mean("Sepal.Length"))
lapply(s,funtion(x) smean(x("Sepal.Length")))
lapply(s,funtion(x) mean(x("Sepal.Length")))
lapply(s,mean(S[,"Sepal.Length"])
}
lapply(s,mean(s[,"Sepal.Length"])
}
mean(s$virginica)
s1<-as.numeric(s$virginica)
s1<-as.numeric(s$Sepal.Length)
s1
s<-split(iris[,1],iris$Species)
s
mean(s)
s1<-as.numeric(s)
lapply(s,mean)
apply(iris[, 1:4], 1, mean)
rowMeans(iris[, 1:4])
colMeans(iris)
apply(iris, 1, mean)
apply(iris[, 1:4], 2, mean)
apply(iris, 2, mean)
data(mtcars)
mtcars
apply(mtcars, 2, mean)
lapply(mtcars, mean)
with(mtcars, tapply(mpg, cyl, mean))
mean(mtcars$mpg, mtcars$cyl)
tapply(mtcars$mpg, mtcars$cyl, mean)
tapply(mtcars$cyl, mtcars$mpg, mean)
sapply(mtcars, cyl, mean)
split(mtcars, mtcars$cyl)
sapply(split(mtcars$mpg, mtcars$cyl), mean)
split(mtcars$mpg, mtcars$cyl)
mtcars
s<-split(mtcars$hp,mtcars$cyl)
s
sapply(s,mean)
s2<-sapply(s,mean)
s2
s2[3]-s2[1]
debug(ls)
ls()
3
0
nn
nn
nn
n
0
setwd("G:/R Programming/Coursera")
X=matrix(1:9,3,3)
X
solve(X)
X=matrix(1:9:2,3,3)
X=matrix(1:9:3,3,3)
X
X=matrix(1:9:2,3,3)
X
X=matrix(1:9:5,3,3)
X
solve(X)
solve(X)
Y<-solve(X)
solve(Y)
source('G:/R Programming/Coursera/meancache.R')
x<-1:9
makeVector(x)
cachemean(x)
cachemean(makeVector())
x
cachemean(x)
myvector,-makeVector(1:15)
myvector<-makeVector(1:15)
myvector
result<-cachemean(1:15)
result<-cachemean(myvector)
result
aresult<-cachemean((myvector))
aresult
vector2<-makevector(1:10)
vector2<-makeVector(1:10)
bresult<-cachemean(vector2)
bresult
bresult<-cachemean(vector2)
bresult
mean(vector2)
mean(vector2$x)
mean(vector2$get)
vector3<-vector2$get
vector3
x
vector2$setmean(3)
vector2$getmean()
bresult<-cachemean(vector2)
bresult
vector2$get
vector2$get()
y<-matrix()
y
source('G:/R Programming/Coursera/inversecache.R')
mymatrix<-makeCacheMatrix(matrix(c(1,2,-2,-1,3,0,0,-2,1),3,3))
mymatrix
mymatrix$get()
mymatrix<-makeCacheMatrix(matrix(c(1,-1,0,2,3,-2,-2,0,1),3,3))
mymatrix$get()
cacheSolve(mymatrix)
cacheSolve(mymatrix)
source('G:/R Programming/Coursera/inversecache.R')
mymatrix<-makeCacheMatrix(matrix(c(1,-1,0,2,3,-2,-2,0,1),3,3))
cacheSolve(mymatrix)
cacheSolve(mymatrix)
source('G:/R Programming/Coursera/inversecache.R')
mymatrix<-makeCacheMatrix(matrix(c(1,-1,0,2,3,-2,-2,0,1),3,3))
cacheSolve(mymatrix)
cacheSolve(mymatrix)
source('G:/R Programming/Coursera/inversecache.R')
